// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: producer_service.proto

package rabbitmq_producer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RabbitmqProducerService_Payment_Service_Webhook_Producer_FullMethodName = "/rabbitmq_producer_service.rabbitmqProducerService/Payment_Service_Webhook_Producer"
	RabbitmqProducerService_Lock_Seats_FullMethodName                       = "/rabbitmq_producer_service.rabbitmqProducerService/Lock_Seats"
	RabbitmqProducerService_Unlock_Seats_FullMethodName                     = "/rabbitmq_producer_service.rabbitmqProducerService/Unlock_Seats"
	RabbitmqProducerService_Send_Mail_Producer_FullMethodName               = "/rabbitmq_producer_service.rabbitmqProducerService/Send_Mail_Producer"
	RabbitmqProducerService_Payment_Service_Failure_Producer_FullMethodName = "/rabbitmq_producer_service.rabbitmqProducerService/Payment_Service_Failure_Producer"
)

// RabbitmqProducerServiceClient is the client API for RabbitmqProducerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RabbitmqProducerServiceClient interface {
	Payment_Service_Webhook_Producer(ctx context.Context, in *Payment_Service_Producer_Request, opts ...grpc.CallOption) (*Payment_Service_Producer_Response, error)
	Lock_Seats(ctx context.Context, in *Lock_Seats_Request, opts ...grpc.CallOption) (*Lock_Seats_Response, error)
	Unlock_Seats(ctx context.Context, in *Unlock_Seats_Request, opts ...grpc.CallOption) (*Unlock_Seats_Response, error)
	Send_Mail_Producer(ctx context.Context, in *Send_Mail_Producer_Request, opts ...grpc.CallOption) (*Send_Mail_Producer_Response, error)
	Payment_Service_Failure_Producer(ctx context.Context, in *Payment_Service_Producer_Request, opts ...grpc.CallOption) (*Payment_Service_Producer_Response, error)
}

type rabbitmqProducerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRabbitmqProducerServiceClient(cc grpc.ClientConnInterface) RabbitmqProducerServiceClient {
	return &rabbitmqProducerServiceClient{cc}
}

func (c *rabbitmqProducerServiceClient) Payment_Service_Webhook_Producer(ctx context.Context, in *Payment_Service_Producer_Request, opts ...grpc.CallOption) (*Payment_Service_Producer_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payment_Service_Producer_Response)
	err := c.cc.Invoke(ctx, RabbitmqProducerService_Payment_Service_Webhook_Producer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitmqProducerServiceClient) Lock_Seats(ctx context.Context, in *Lock_Seats_Request, opts ...grpc.CallOption) (*Lock_Seats_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lock_Seats_Response)
	err := c.cc.Invoke(ctx, RabbitmqProducerService_Lock_Seats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitmqProducerServiceClient) Unlock_Seats(ctx context.Context, in *Unlock_Seats_Request, opts ...grpc.CallOption) (*Unlock_Seats_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Unlock_Seats_Response)
	err := c.cc.Invoke(ctx, RabbitmqProducerService_Unlock_Seats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitmqProducerServiceClient) Send_Mail_Producer(ctx context.Context, in *Send_Mail_Producer_Request, opts ...grpc.CallOption) (*Send_Mail_Producer_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Send_Mail_Producer_Response)
	err := c.cc.Invoke(ctx, RabbitmqProducerService_Send_Mail_Producer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitmqProducerServiceClient) Payment_Service_Failure_Producer(ctx context.Context, in *Payment_Service_Producer_Request, opts ...grpc.CallOption) (*Payment_Service_Producer_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payment_Service_Producer_Response)
	err := c.cc.Invoke(ctx, RabbitmqProducerService_Payment_Service_Failure_Producer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RabbitmqProducerServiceServer is the server API for RabbitmqProducerService service.
// All implementations must embed UnimplementedRabbitmqProducerServiceServer
// for forward compatibility.
type RabbitmqProducerServiceServer interface {
	Payment_Service_Webhook_Producer(context.Context, *Payment_Service_Producer_Request) (*Payment_Service_Producer_Response, error)
	Lock_Seats(context.Context, *Lock_Seats_Request) (*Lock_Seats_Response, error)
	Unlock_Seats(context.Context, *Unlock_Seats_Request) (*Unlock_Seats_Response, error)
	Send_Mail_Producer(context.Context, *Send_Mail_Producer_Request) (*Send_Mail_Producer_Response, error)
	Payment_Service_Failure_Producer(context.Context, *Payment_Service_Producer_Request) (*Payment_Service_Producer_Response, error)
	mustEmbedUnimplementedRabbitmqProducerServiceServer()
}

// UnimplementedRabbitmqProducerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRabbitmqProducerServiceServer struct{}

func (UnimplementedRabbitmqProducerServiceServer) Payment_Service_Webhook_Producer(context.Context, *Payment_Service_Producer_Request) (*Payment_Service_Producer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payment_Service_Webhook_Producer not implemented")
}
func (UnimplementedRabbitmqProducerServiceServer) Lock_Seats(context.Context, *Lock_Seats_Request) (*Lock_Seats_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock_Seats not implemented")
}
func (UnimplementedRabbitmqProducerServiceServer) Unlock_Seats(context.Context, *Unlock_Seats_Request) (*Unlock_Seats_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock_Seats not implemented")
}
func (UnimplementedRabbitmqProducerServiceServer) Send_Mail_Producer(context.Context, *Send_Mail_Producer_Request) (*Send_Mail_Producer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send_Mail_Producer not implemented")
}
func (UnimplementedRabbitmqProducerServiceServer) Payment_Service_Failure_Producer(context.Context, *Payment_Service_Producer_Request) (*Payment_Service_Producer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payment_Service_Failure_Producer not implemented")
}
func (UnimplementedRabbitmqProducerServiceServer) mustEmbedUnimplementedRabbitmqProducerServiceServer() {
}
func (UnimplementedRabbitmqProducerServiceServer) testEmbeddedByValue() {}

// UnsafeRabbitmqProducerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RabbitmqProducerServiceServer will
// result in compilation errors.
type UnsafeRabbitmqProducerServiceServer interface {
	mustEmbedUnimplementedRabbitmqProducerServiceServer()
}

func RegisterRabbitmqProducerServiceServer(s grpc.ServiceRegistrar, srv RabbitmqProducerServiceServer) {
	// If the following call pancis, it indicates UnimplementedRabbitmqProducerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RabbitmqProducerService_ServiceDesc, srv)
}

func _RabbitmqProducerService_Payment_Service_Webhook_Producer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment_Service_Producer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitmqProducerServiceServer).Payment_Service_Webhook_Producer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RabbitmqProducerService_Payment_Service_Webhook_Producer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitmqProducerServiceServer).Payment_Service_Webhook_Producer(ctx, req.(*Payment_Service_Producer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitmqProducerService_Lock_Seats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lock_Seats_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitmqProducerServiceServer).Lock_Seats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RabbitmqProducerService_Lock_Seats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitmqProducerServiceServer).Lock_Seats(ctx, req.(*Lock_Seats_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitmqProducerService_Unlock_Seats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Unlock_Seats_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitmqProducerServiceServer).Unlock_Seats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RabbitmqProducerService_Unlock_Seats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitmqProducerServiceServer).Unlock_Seats(ctx, req.(*Unlock_Seats_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitmqProducerService_Send_Mail_Producer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Send_Mail_Producer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitmqProducerServiceServer).Send_Mail_Producer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RabbitmqProducerService_Send_Mail_Producer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitmqProducerServiceServer).Send_Mail_Producer(ctx, req.(*Send_Mail_Producer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitmqProducerService_Payment_Service_Failure_Producer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment_Service_Producer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitmqProducerServiceServer).Payment_Service_Failure_Producer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RabbitmqProducerService_Payment_Service_Failure_Producer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitmqProducerServiceServer).Payment_Service_Failure_Producer(ctx, req.(*Payment_Service_Producer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RabbitmqProducerService_ServiceDesc is the grpc.ServiceDesc for RabbitmqProducerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RabbitmqProducerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabbitmq_producer_service.rabbitmqProducerService",
	HandlerType: (*RabbitmqProducerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Payment_Service_Webhook_Producer",
			Handler:    _RabbitmqProducerService_Payment_Service_Webhook_Producer_Handler,
		},
		{
			MethodName: "Lock_Seats",
			Handler:    _RabbitmqProducerService_Lock_Seats_Handler,
		},
		{
			MethodName: "Unlock_Seats",
			Handler:    _RabbitmqProducerService_Unlock_Seats_Handler,
		},
		{
			MethodName: "Send_Mail_Producer",
			Handler:    _RabbitmqProducerService_Send_Mail_Producer_Handler,
		},
		{
			MethodName: "Payment_Service_Failure_Producer",
			Handler:    _RabbitmqProducerService_Payment_Service_Failure_Producer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "producer_service.proto",
}
